# Copyright 2021 Spotify AB
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""TODO: docstrings"""
# TODO: be sure to note that this is implemented as an ipython magic
# extension, but it's only used in jupyter
import os
import warnings

from apache_beam.runners.interactive.display import pipeline_graph
from IPython import display
from IPython.core import magic

from klio_exec.commands.utils import interactive_common as ic
from klio_exec.commands.utils import interactive_utils as utils


CONFIG_CONTENTS = """# File generated by klio-exec
c.InteractiveShellApp.extensions = ["klio_exec.commands.utils.ipython_ext"]
"""


@magic.magics_class
class IPythonKlioMagic(magic.Magics):
    def __init__(self, shell):
        super(IPythonKlioMagic, self).__init__(shell)
        self.ctx_mgr = utils.InteractiveKlioContext()

    def _show_graph(self, pipeline):
        # TODO: warn users that this is using an experimental beam API
        g = pipeline_graph.PipelineGraph(pipeline)
        svg = g._graph.create_svg()
        print(
            "\u001b[38;2;117;152;248;1mNote: Rectangular nodes are transforms, "
            "circular nodes are PCollections\u001b[0m"
        )
        display.display(display.SVG(g._graph.create_svg()))

    def _show_info(self):
        # TODO: update header examples to look like Jupyter prompt instead of k>>
        print(ic.SHOW_INFO_BANNER.format(**self.ctx_mgr._get_version_ctx_args()))

    def _get_local_scope_objects(self):
        local_ns = self.ctx_mgr.get_local_scope_objects()
        local_ns["show_graph"] = self._show_graph
        local_ns["show_info"] = self._show_info
        return local_ns

    @magic.line_magic
    def klioify(self, line):
        """TODO: docstrings"""
        warnings.simplefilter("ignore")
        klio_scope = self._get_local_scope_objects()
        local_ns = self.shell.user_ns
        local_ns.update(klio_scope)
        self._show_info()


# IPython + Jupyter notebooks looks for any `load_ipython_extension` functions
# when an extension is configured (see `generate_ipython_config`)
def load_ipython_extension(ipython):
    klio_magic = IPythonKlioMagic(ipython)
    ipython.register_magics(klio_magic)


def generate_ipython_config():
    """TODO: docstrings"""
    user_path = os.path.expanduser("~")
    ipython_path = os.path.join(user_path, ".ipython")

    if not os.path.exists(ipython_path):
        print(f"Creating {ipython_path}")
        os.mkdir(ipython_path)

    profile_default_path = os.path.join(ipython_path, "profile_default")
    if not os.path.exists(profile_default_path):
        print(f"Creating {profile_default_path}")
        os.mkdir(profile_default_path)

    config_filepath = os.path.join(profile_default_path, "ipython_config.py")
    with open(config_filepath, "w") as f:
        f.write(CONFIG_CONTENTS)

